# What are the row names of your dataframe?
rownames(u_expen)
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
u_expen <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(u_expen)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(u_expen)
# Add a column "category" to your data frame that contains the rownames
u_expen$category <- rownames(us_exp)
# How much money was spent on personal care in 1940?
care_1940 <- u_expen['Personal Care', 'X1940']
# How much money was spent on Food and Tobacco in 1960?
food_1960 <- u_expen['Food and Tobacco', 'X1960']
# What was the highest expenditure category in 1960?
highest_1960 <- u_expen$category[us_exp$X1960 == max(us_exp$X1960)]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col <- paste0('X', year)
u_expen$category[u_expen[, col] == min(us_exp[, col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
low <- sapply(seq(1940, 1960, 5), lowest_category)
# Add a column "category" to your data frame that contains the rownames
u_expen$category <- rownames(u_expen)
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
u_expen <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(u_expen)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(u_expen)
# Add a column "category" to your data frame that contains the rownames
u_expen$category <- rownames(u_expen)
# How much money was spent on personal care in 1940?
care_1940 <- u_expen['Personal Care', 'X1940']
# How much money was spent on Food and Tobacco in 1960?
food_1960 <- u_expen['Food and Tobacco', 'X1960']
# What was the highest expenditure category in 1960?
highest_1960 <- u_expen$category[us_exp$X1960 == max(us_exp$X1960)]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col <- paste0('X', year)
u_expen$category[u_expen[, col] == min(us_exp[, col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
low <- sapply(seq(1940, 1960, 5), lowest_category)
u_expen$category[u_expen[, col] == min(u_expen[, col])]
# Exercise 3: working with built-in data sets
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data("USPersonalExpenditure")
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
u_expen <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(u_expen)
## Consider: why are they so strange? Think about whether you could use a number
## like 1940 with dollar notation!
# What are the row names of your dataframe?
rownames(u_expen)
# Add a column "category" to your data frame that contains the rownames
u_expen$category <- rownames(u_expen)
# How much money was spent on personal care in 1940?
care_1940 <- u_expen['Personal Care', 'X1940']
# How much money was spent on Food and Tobacco in 1960?
food_1960 <- u_expen['Food and Tobacco', 'X1960']
# What was the highest expenditure category in 1960?
highest_1960 <- u_expen$category[us_exp$X1960 == max(us_exp$X1960)]
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col <- paste0('X', year)
u_expen$category[u_expen[, col] == min(u_expen[, col])]
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
low <- sapply(seq(1940, 1960, 5), lowest_category)
# Exercise 3: using the pipe operator
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura <- filter(vehicles, make == 'Acura', year == 2015)
top_acura <- filter(acuras, hwy == max(hwy))
top_model <- select(best_acura, model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
top_model <- select(
filter(
filter(vehicles, make == 'Acura', year == 2015), hwy == max(hwy)), model
)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr and the pipe operator)
top_model <- filter(vehicles, make == 'Acura', year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
### Bonus
# Write 3 functions, one for each approach.  Then,
# Test how long it takes to perform each one 1000 times
install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura <- filter(vehicles, make == 'Acura', year == 2015)
top_acura <- filter(acuras, hwy == max(hwy))
top_model <- select(best_acura, model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
top_model <- select(
filter(
filter(vehicles, make == 'Acura', year == 2015), hwy == max(hwy)), model
)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr and the pipe operator)
top_model <- filter(vehicles, make == 'Acura', year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
### Bonus
# Write 3 functions, one for each approach.  Then,
# Test how long it takes to perform each one 1000 times
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicle_1997 <- vehicles[vehicles$year==1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicle_1997 <- cars_1997[order(cars_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicle_1997$average = (cars_1997$hwy + cars_1997$cty) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twd_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_highway <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_filter <- function(make_choice, year_choice) {
filtered <- vehicles[vehicles$make == make_choice & vehicles$year == year_choice, ]
filtered[filtered$hwy == max(filtered$hwy), 'model']
}
# What was the most efficient Honda model of 1995?
make_filter('Honda', 1995)
# Exercise 2: working with `dplyr`
# Note that this exercise repeats the analysis from Exercise 1, but should be
# performed using `dplyr` (do not directly access or manipulate the data frames)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(vehicles,make))
length(unique(makes$make))
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- filter(vehicles, year==1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
vehicles_1997 <- arrange(cars_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997 <- mutate(cars_1997, average = (hwy + cty) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twd_20_mpg <- filter(vehicles, drive == '2-Wheel Drive', cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter <- filter(two_wheel_20_mpg, hwy == min(hwy))
worst_highway <- select(filtered, id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_filter <- function(make_choice, year_choice) {
filtered <- filter(vehicles, make == make_choice, year == year_choice)
filtered <- filter(filtered, hwy == max(hwy))
selected <- select(filtered, model)
selected
}
# What was the most efficient Honda model of 1995?
make_filter('Honda', 1995)
install.packages("dplyr")
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicle_1997 <- vehicles[vehicles$year==1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicle_1997 <- cars_1997[order(cars_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicle_1997$average = (cars_1997$hwy + cars_1997$cty) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twd_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_highway <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_filter <- function(make_choice, year_choice) {
filtered <- vehicles[vehicles$make == make_choice & vehicles$year == year_choice, ]
filtered[filtered$hwy == max(filtered$hwy), 'model']
}
# What was the most efficient Honda model of 1995?
make_filter('Honda', 1995)
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
#install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
#devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicle_1997 <- vehicles[vehicles$year==1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicle_1997 <- cars_1997[order(cars_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicle_1997$average = (cars_1997$hwy + cars_1997$cty) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twd_20_mpg <- vehicles[vehicles$drive == '2-Wheel Drive' & vehicles$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_highway <- two_wheel_20_mpg$id[two_wheel_20_mpg$hwy == min(two_wheel_20_mpg$hwy)]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_filter <- function(make_choice, year_choice) {
filtered <- vehicles[vehicles$make == make_choice & vehicles$year == year_choice, ]
filtered[filtered$hwy == max(filtered$hwy), 'model']
}
# What was the most efficient Honda model of 1995?
make_filter('Honda', 1995)
# Exercise 2: working with `dplyr`
# Note that this exercise repeats the analysis from Exercise 1, but should be
# performed using `dplyr` (do not directly access or manipulate the data frames)
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(vehicles,make))
length(unique(makes$make))
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- filter(vehicles, year==1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
vehicles_1997 <- arrange(cars_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997 <- mutate(cars_1997, average = (hwy + cty) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
twd_20_mpg <- filter(vehicles, drive == '2-Wheel Drive', cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
filter <- filter(two_wheel_20_mpg, hwy == min(hwy))
worst_highway <- select(filtered, id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
make_filter <- function(make_choice, year_choice) {
filtered <- filter(vehicles, make == make_choice, year == year_choice)
filtered <- filter(filtered, hwy == max(hwy))
selected <- select(filtered, model)
selected
}
# What was the most efficient Honda model of 1995?
make_filter('Honda', 1995)
# Exercise 3: using the pipe operator
# Install (if needed) and load the "dplyr" library
#install.packages("dplyr")
library("dplyr")
# Install (if needed) and load the "fueleconomy" package
#install.packages('devtools')
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Which 2015 Acura model has the best hwy MGH? (Use dplyr, but without method
# chaining or pipes--use temporary variables!)
acura <- filter(vehicles, make == 'Acura', year == 2015)
top_acura <- filter(acuras, hwy == max(hwy))
top_model <- select(best_acura, model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
top_model <- select(
filter(
filter(vehicles, make == 'Acura', year == 2015), hwy == max(hwy)), model
)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr and the pipe operator)
top_model <- filter(vehicles, make == 'Acura', year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
### Bonus
# Write 3 functions, one for each approach.  Then,
# Test how long it takes to perform each one 1000 times
